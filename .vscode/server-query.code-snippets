{
	// Place your web-jbs-hardware workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"API Service": {
		"scope": "javascriptreact",
		"prefix": "apiQuery",
		"body": [
			"const mysql = require('mysql')",
			"const my = require('../../../data/connection/mysql')",
			"const cache = require('../../../data/connection/cache')",
			"const query = require('../../../data/connection/query')",
			"const table = require('./${1:ModuleName}.helper')",
			"require(\"../../utilities/query.prototypes\")",
			"",
			"const createRecord = async (param, callback) => {",
			"    let helper = query.createBuilder(param, table.${1:ModuleName})",
			"    let sql = query.builder.add(table.${1:ModuleName}.name, helper.create.fields, helper.create.values)",
			"    my.query(sql, helper.parameters, async (err, ans) => {",
			"        if (err) return callback(err)",
			"        const res = ans",
			"        await cache.creationCache(sql, ans['insertId'])",
			"        return callback(null, res)",
			"    })",
			"}",
			"",
			"const updateRecord = async (param, callback) => {",
			"    let helper = query.updateBuilder(param, table.${1:ModuleName})",
			"    let sql = query.builder.set(table.${1:ModuleName}.name, helper.update.fields, table.${1:ModuleName}.fields.id)",
			"    await cache.modificyCache(sql, param.id)",
			"    my.query(sql, helper.parameters, async (err, ans) => {",
			"        if (err) return callback(err)",
			"        return callback(null, ans)",
			"    })",
			"}",
			"",
			"const deleteRecord = async (param, callback) => {",
			"    let sql = query.builder.del(table.${1:ModuleName}.name, table.${1:ModuleName}.fields.id)",
			"    await cache.modificyCache(sql, param.id)",
			"    my.query(sql, [param.id], async (err, ans) => {",
			"        if (err) return callback(err)",
			"        return callback(null, ans)",
			"    })",
			"}",
			"",
			"const selectRecord = async (param, callback) => {",
			"    let { name, id } = table.${1:ModuleName}.fields",
			"    let options = {",
			"        parameter: [param.search?.Contains()],",
			"        filter: [name?.Like()],",
			"        order: [id?.Asc()]",
			"    }",
			"    let sql = query.builder.rec(table.${1:ModuleName}, options.filter, options.order)",
			"    my.query(sql, options.parameter, (err, ans) => {",
			"        if (err) return callback(err)",
			"        return callback(null, ans)",
			"    })",
			"}",
			"",
			"const uniqueRecord = async (param, callback) => {",
			"    let sql = query.builder.get(table.${1:ModuleName}, table.${1:ModuleName}.fields.id)",
			"    my.query(sql, [param.id], (err, ans) => {",
			"        if (err) return callback(err)",
			"        return callback(null, ans)",
			"    })",
			"}",
			"",
			"const searchRecord = async (param, callback) => {",
			"let { id } = table.${1:ModuleName}.fields",
			"let helper = query.searchBuilder(param.search, table.${1:ModuleName})",
			"let sql = query.builder.src(table.${1:ModuleName}, helper.filters, [id?.Asc()])",
			"my.query(sql, helper.parameters, (err, ans) => {",
			"if (err) return callback(err)",
			"return callback(null, ans)",
			"})",
			"}",
			"",
			"module.exports = {",
			"    createRecord,",
			"    updateRecord,",
			"    deleteRecord,",
			"    selectRecord,",
			"    uniqueRecord,",
			"    searchRecord",
			"}"
		],
		"description": ""
	}
}