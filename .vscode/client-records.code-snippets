{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Client Record": {
		"scope": "javascriptreact",
		"prefix": "tmpRecords",
		"body": [
			"import React, { useEffect, useState } from 'react'",
			"import { sortBy } from '../../../utilities/functions/array.functions'",
			"import DataOperation from '../../../utilities/interface/datastack/data.operation'",
			"import DataRecords from '../../../utilities/interface/datastack/data.records'",
			"import NotificationDelete from '../../../utilities/interface/notification/notification.delete'",
			"import { delete${1:ModuleName} } from './${1/(.*)/${1:/downcase}/}.services'",
			"",
			"const ${1:ModuleName}Records = ({ setter, manage, refetch, data }) => {",
			"const [records, setrecords] = useState()",
			"const [showDelete, setShowDelete] = useState(false)",
			"const [currentRecord, setCurrentRecord] = useState({})",
			"const [sorted, setsorted] = useState()",
			"const [startpage, setstartpage] = useState(1)",
			"const itemsperpage = 150",
			"const columns = {",
			"style: '',",
			"items: [",
			"{ name: '${1:ModuleName}', stack: false, sort: 'name' },",
			"{ name: 'Details', stack: true, sort: 'details', size: 100 },",
			"{ name: '', stack: false, screenreader: 'Action', size: 200 },",
			"]",
			"}",
			"",
			"const rowSelect = (record) => setCurrentRecord(record)",
			"",
			"const toggleDelete = (record) => {",
			"setCurrentRecord(record)",
			"setShowDelete(true)",
			"}",
			"",
			"const toggleEdit = (item) => {",
			"setter(item.id)",
			"manage(true)",
			"}",
			"",
			"const handleDelete = async () => {",
			"if (currentRecord) {",
			"let res = await delete${1:ModuleName}(currentRecord?.id)",
			"setShowDelete(false)",
			"if (res.success) refetch()",
			"}",
			"}",
			"",
			"const actions = (item) => {",
			"return [",
			"{ type: 'link', link: `/${1/(.*)/${1:/downcase}/}`, label: 'View' },",
			"{ type: 'button', trigger: () => toggleEdit(item), label: 'Edit' },",
			"{ type: 'button', trigger: () => toggleDelete(item), label: 'Delete' }",
			"]",
			"}",
			"",
			"const items = (item) => {",
			"return [",
			"{ value: item.name },",
			"{ value: item.details },",
			"{ value: <DataOperation actions={actions(item)} /> }",
			"]",
			"}",
			"",
			"useEffect(() => {",
			"if (data) {",
			"let tempdata = sorted ? sortBy(data, sorted) : data",
			"setrecords(tempdata?.map((item, i) => {",
			"return {",
			"key: item.id,",
			"ondoubleclick: () => rowSelect(item),",
			"items: items(item)",
			"}",
			"}))",
			"}",
			"}, [data, sorted])",
			"",
			"return (",
			"<>",
			"<DataRecords",
			"columns={columns}",
			"records={records}",
			"page={startpage}",
			"setPage={setstartpage}",
			"itemsperpage={itemsperpage}",
			"setsorted={setsorted}",
			"/>",
			"<NotificationDelete",
			"name={currentRecord?.supplier}",
			"show={showDelete}",
			"setshow={setShowDelete}",
			"handleDelete={handleDelete}",
			"/>",
			"</>",
			")",
			"}",
			"export default ${1:ModuleName}Records",
		],
		"description": ""
	}
}