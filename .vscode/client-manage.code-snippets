{
	// Place your web-jbs-hardware workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Client Index": {
		"scope": "javascriptreact",
		"prefix": "tmpManage",
		"body": [
			"import React, { useEffect, useState } from 'react'",
			"import { processForm } from '../../../utilities/functions/query.functions'",
			"import useYup from '../../../utilities/hooks/useYup'",
			"import DataInputs from '../../../utilities/interface/datastack/data.inputs'",
			"import Text from '../../../utilities/interface/forminput/input.text'",
			"import { create${1:ModuleName}, fetch${1:ModuleName}ById, update${1:ModuleName} } from './${1/(.*)/${1:/downcase}/}.services'",
			"",
			"const ${1:ModuleName}Manage = ({ id, name, manage }) => {",
			"const [values, setvalues] = useState()",
			"const { yup } = useYup()",
			"const { mutate } = processForm(id, name, update${1:ModuleName}, create${1:ModuleName})",
			"const [instantiated, setinstantiated] = useState(false)",
			"",
			"const schema = yup.object().shape({",
			"name: yup",
			".string()",
			".required('This is a required field.'),",
			"})",
			"",
			"const fields = (errors, register, values, setValue, watch) => {",
			"return (",
			"<>",
			"<Text",
			"label='${1:ModuleName} Name'",
			"register={register}",
			"name='name'",
			"errors={errors} ",
			"autoComplete='off'",
			"wrapper='lg:w-1/2'",
			"/>",
			"</>",
			")",
			"}",
			"",
			"useEffect(() => {",
			"const instantiate = async () => {",
			"// setcategory(await libraryCategory())",
			"setinstantiated(true)",
			"}",
			"",
			"instantiate()",
			"return () => {",
			"setinstantiated(false)",
			"}",
			"}, [])",
			"",
			"useEffect(() => {",
			"if (id && instantiated) {",
			"fetch${1:ModuleName}ById(id).then((ret) => {",
			"setvalues({",
			"${2:FieldName}: ret?.result?.${2:FieldName},",
			"})",
			"})",
			"}",
			"}, [id, instantiated])",
			"",
			"const submit = (data) => {",
			"let param = {",
			"name: data.name,",
			"}",
			"if (id) param = { ...param, id: id }",
			"mutate(param)",
			"manage(false)",
			"}",
			"",
			"return (",
			"<DataInputs",
			"id={id}",
			"name={name}",
			"values={values}",
			"schema={schema}",
			"fields={fields}",
			"submit={submit}",
			"manage={manage}",
			"/>",
			")",
			"}",
			"",
			"export default ${1:ModuleName}Manage",
		],
		"description": ""
	}
}